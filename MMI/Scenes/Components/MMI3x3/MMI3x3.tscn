[gd_scene load_steps=10 format=3 uid="uid://b4ltp4nnviu3"]

[ext_resource type="Texture2D" uid="uid://bg45l0703p3we" path="res://Scenes/Components/MMI3x3/MMI3x3.png" id="1_lvii3"]
[ext_resource type="Texture2D" uid="uid://rcmsbv3cjero" path="res://Scenes/Components/MMI3x3/Overlays/MMI_B_Overlay.png" id="2_nvvod"]
[ext_resource type="Texture2D" uid="uid://dh23ldwyud587" path="res://Scenes/Components/MMI3x3/Overlays/MMI_A_Overlay.png" id="3_kf717"]
[ext_resource type="Texture2D" uid="uid://cgrrfqxmrvw1f" path="res://Scenes/Components/MMI3x3/Overlays/MMI_C_Overlay.png" id="4_dg366"]
[ext_resource type="Texture2D" uid="uid://cjuj4xyvfxtlt" path="res://Scenes/Components/MMI3x3/Overlays/MMI_C_Overlay_Turned.png" id="5_4ox23"]
[ext_resource type="Texture2D" uid="uid://bbqk0w6t68pcr" path="res://Scenes/Components/MMI3x3/Overlays/MMI_A_Overlay_Turned.png" id="6_rtarb"]
[ext_resource type="Texture2D" uid="uid://cy2odaby7j33w" path="res://Scenes/Components/MMI3x3/Overlays/MMI_B_Overlay_Turned.png" id="7_5gcww"]

[sub_resource type="Shader" id="Shader_rx45y"]
code = "// Laser Farbe
shader_type canvas_item;
render_mode blend_add;

uniform vec4 laserColor;

uniform vec4 lightInFlow1; // x = intensity, y = phase, z = offsetx, w = offsety
uniform vec4 lightOutFlow1;
uniform vec4 lightInFlow2; 
uniform vec4 lightOutFlow2;
uniform vec4 lightInFlow3; 
uniform vec4 lightOutFlow3;
uniform vec4 lightInFlow4;
uniform vec4 lightOutFlow4;
uniform vec4 lightInFlow5;
uniform vec4 lightOutFlow5;
uniform vec4 lightInFlow6;
uniform vec4 lightOutFlow6;
uniform vec4 lightInFlow7;
uniform vec4 lightOutFlow7;
uniform vec4 lightInFlow8;
uniform vec4 lightOutFlow8;
// ... so viele wie man lustig ist. Am Besten 16 (8 in, 8 out) oder sowas, damit man nur einen einzigen Shader braucht für alle

uniform sampler2D animation1;
uniform sampler2D animation2;
uniform sampler2D animation3;
uniform sampler2D animation4;
uniform sampler2D animation5;
uniform sampler2D animation6;
uniform sampler2D animation7;
uniform sampler2D animation8;
// ... die hälfte von oben, also 8 (in/out ist ja nur umgedreht in der Zeit)
uniform float numAnimationColumns = 4.0;


vec4 getAnimationFrameColor(sampler2D animationTexture, vec2 uvCoord, float speed, vec4 lightInOutFlow) {
    float phaseShift = lightInOutFlow.y;
	    
    int currentFrameIndex = int(TIME * speed + phaseShift) % int(numAnimationColumns);
    float frameShift = float(currentFrameIndex) / numAnimationColumns; // frameshift shifts the UV.x so that the starting point is in the proper column
	if(speed < 0.0) // if the speed is negative, then the animation should playbackwards, so 0.75, 0.5, 0.25, 0
	{
		 frameShift = 0.75 - frameShift;
	}
	
    vec2 adjustedUV = vec2((uvCoord.x / numAnimationColumns + frameShift), uvCoord.y);
    return texture(animationTexture, adjustedUV);
}

float subtractBlueFromRedLight(vec4 currentInflowColor, float lightInflowIntensity){
	
	return currentInflowColor.a *(currentInflowColor.r - currentInflowColor.b) * lightInflowIntensity;
}
void fragment(){
	float animationspeed = 2.0f;
	
	vec4 col_baseTexture = texture(TEXTURE, UV);
	vec4 col_anim1in  = getAnimationFrameColor(animation1,UV,animationspeed, lightInFlow1);
	vec4 col_anim1out = getAnimationFrameColor(animation1,UV,-animationspeed, lightOutFlow1);
    vec4 col_anim2in  = getAnimationFrameColor(animation2,UV,animationspeed, lightInFlow2);
	vec4 col_anim2out = getAnimationFrameColor(animation2,UV,-animationspeed, lightOutFlow2);
    vec4 col_anim3in  = getAnimationFrameColor(animation3,UV,animationspeed, lightInFlow3);
	vec4 col_anim3out = getAnimationFrameColor(animation3,UV,-animationspeed, lightOutFlow3);
    vec4 col_anim4in  = getAnimationFrameColor(animation4,UV,animationspeed, lightInFlow4);
	vec4 col_anim4out = getAnimationFrameColor(animation4,UV,-animationspeed, lightOutFlow4);
    vec4 col_anim5in  = getAnimationFrameColor(animation5,UV,animationspeed, lightInFlow5);
	vec4 col_anim5out = getAnimationFrameColor(animation5,UV,-animationspeed, lightOutFlow5);
    vec4 col_anim6in  = getAnimationFrameColor(animation6,UV,animationspeed, lightInFlow6);
	vec4 col_anim6out = getAnimationFrameColor(animation6,UV,-animationspeed, lightOutFlow6);
    vec4 col_anim7in  = getAnimationFrameColor(animation7,UV,animationspeed, lightInFlow7);
	vec4 col_anim7out = getAnimationFrameColor(animation7,UV,-animationspeed, lightOutFlow7);
    vec4 col_anim8in  = getAnimationFrameColor(animation8,UV,animationspeed, lightInFlow8);
	vec4 col_anim8out = getAnimationFrameColor(animation8,UV,-animationspeed, lightOutFlow8);
    
  // Der rot Kanal = höhen, z.B.
  // Der blau Kanal = tiefen
  
  float intensity = subtractBlueFromRedLight( col_anim1in, lightInFlow1.x) +
		subtractBlueFromRedLight( col_anim2in, lightInFlow2.x) +
		subtractBlueFromRedLight( col_anim3in, lightInFlow3.x) +
		subtractBlueFromRedLight( col_anim4in, lightInFlow4.x) +
		subtractBlueFromRedLight( col_anim5in, lightInFlow5.x) +
		subtractBlueFromRedLight( col_anim6in, lightInFlow6.x) +
		subtractBlueFromRedLight( col_anim7in, lightInFlow7.x) +
		subtractBlueFromRedLight( col_anim8in, lightInFlow8.x) +
		subtractBlueFromRedLight( col_anim1out, lightOutFlow1.x) +
		subtractBlueFromRedLight( col_anim2out, lightOutFlow2.x) +
		subtractBlueFromRedLight( col_anim3out, lightOutFlow3.x) +
		subtractBlueFromRedLight( col_anim4out, lightOutFlow4.x) +
		subtractBlueFromRedLight( col_anim5out, lightOutFlow5.x) +
		subtractBlueFromRedLight( col_anim6out, lightOutFlow6.x) +
		subtractBlueFromRedLight( col_anim7out, lightOutFlow7.x) +
		subtractBlueFromRedLight( col_anim8out, lightOutFlow8.x);
	

  COLOR = laserColor * 2.5 * abs(intensity);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_efdvx"]
shader = SubResource("Shader_rx45y")
shader_parameter/laserColor = Vector4(0.4, 0, 0, 1)
shader_parameter/lightInFlow1 = Vector4(1, 0, 0, 0)
shader_parameter/lightOutFlow1 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow2 = Vector4(0, 0, 0, 0)
shader_parameter/lightOutFlow2 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow3 = Vector4(-0.438, -0.24, 0, 0)
shader_parameter/lightOutFlow3 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow4 = Vector4(-0.438, -0.24, 0, 0)
shader_parameter/lightOutFlow4 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow5 = null
shader_parameter/lightOutFlow5 = null
shader_parameter/lightInFlow6 = null
shader_parameter/lightOutFlow6 = null
shader_parameter/lightInFlow7 = null
shader_parameter/lightOutFlow7 = null
shader_parameter/lightInFlow8 = null
shader_parameter/lightOutFlow8 = null
shader_parameter/numAnimationColumns = 4.0
shader_parameter/animation1 = ExtResource("2_nvvod")
shader_parameter/animation2 = ExtResource("3_kf717")
shader_parameter/animation3 = ExtResource("4_dg366")
shader_parameter/animation4 = ExtResource("5_4ox23")
shader_parameter/animation5 = ExtResource("6_rtarb")
shader_parameter/animation6 = ExtResource("7_5gcww")

[node name="MMI3x3" type="TextureRect"]
custom_minimum_size = Vector2(183, 183)
layout_direction = 1
offset_right = 183.0
offset_bottom = 183.0
expand_mode = 3
stretch_mode = 2

[node name="RotationArea" type="Node2D" parent="."]
unique_name_in_owner = true
position = Vector2(92, 92)

[node name="BackgroundImage" type="Sprite2D" parent="RotationArea"]
position = Vector2(-92, -92)
scale = Vector2(2, 2)
texture = ExtResource("1_lvii3")
centered = false
region_rect = Rect2(11.5, 16, 41, 39)

[node name="Overlay" type="Sprite2D" parent="RotationArea"]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_efdvx")
position = Vector2(-91, -91)
scale = Vector2(2, 2)
texture = ExtResource("1_lvii3")
centered = false
region_rect = Rect2(0, 0, 62, 32)

[node name="UI" type="Node2D" parent="."]
