[gd_scene load_steps=10 format=3 uid="uid://b4ltp4nnviu3"]

[ext_resource type="Texture2D" uid="uid://cirsar1cf6vkh" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler LeftUpIn.png" id="2_1cs17"]
[ext_resource type="Texture2D" uid="uid://c8u8whsex2jym" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler.png" id="2_80i23"]
[ext_resource type="Texture2D" uid="uid://dl3wi88wuky6e" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler LeftDown.png" id="3_jbild"]
[ext_resource type="Script" path="res://Scenes/Components/DirectionalCoupler/BackgroundImage.cs" id="3_rkdkq"]
[ext_resource type="Texture2D" uid="uid://b8r7q5o86dey3" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler RightUp.png" id="4_sgbp3"]
[ext_resource type="Texture2D" uid="uid://crhu1ftb6mi8q" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler RightDown.png" id="5_hqp3p"]

[sub_resource type="CSharpScript" id="CSharpScript_niigs"]
script/source = "using Godot;
using MathNet.Numerics.LinearAlgebra;
using System;
using System.Collections.Generic;
using System.Numerics;

namespace DirectionalCoupler.Scenes.Components.DirectionalCoupler
{

    public partial class DirectionalCouplerScene : TextureRect
    {
        [Export] private HSlider Slider;
        [Export] public RichTextLabel Label;
        
        // Called when the node enters the scene tree for the first time.
        public override void _Ready()
        {
            Slider.ValueChanged += Slider_ValueChanged;
            UpdateSliderValue();
        }

        private void UpdateSliderValue()
        {
            Label.Text = \"[center]\" + Slider.Value;
        }

        private void Slider_ValueChanged(double value)
        {
            UpdateSliderValue();
            EmitSignal(\"SliderChanged\", value);
        }

    }

}"

[sub_resource type="Shader" id="Shader_rx45y"]
code = "// Laser Farbe
shader_type canvas_item;
render_mode blend_add;

uniform vec4 laserColor;

uniform vec4 lightInFlow1; // x = intensity, y = phase, z = offsetx, w = offsety
uniform vec4 lightOutFlow1;
uniform vec4 lightInFlow2; 
uniform vec4 lightOutFlow2;
uniform vec4 lightInFlow3; 
uniform vec4 lightOutFlow3;
uniform vec4 lightInFlow4;
uniform vec4 lightOutFlow4;
uniform vec4 lightInFlow5;
uniform vec4 lightOutFlow5;
uniform vec4 lightInFlow6;
uniform vec4 lightOutFlow6;
uniform vec4 lightInFlow7;
uniform vec4 lightOutFlow7;
uniform vec4 lightInFlow8;
uniform vec4 lightOutFlow8;
// ... so viele wie man lustig ist. Am Besten 16 (8 in, 8 out) oder sowas, damit man nur einen einzigen Shader braucht für alle

uniform sampler2D animation1;
uniform sampler2D animation2;
uniform sampler2D animation3;
uniform sampler2D animation4;
uniform sampler2D animation5;
uniform sampler2D animation6;
uniform sampler2D animation7;
uniform sampler2D animation8;
// ... die hälfte von oben, also 8 (in/out ist ja nur umgedreht in der Zeit)
uniform float numAnimationColumns = 4.0;


vec4 getAnimationFrameColor(sampler2D animationTexture, vec2 uvCoord, float speed, vec4 lightInOutFlow) {
    float phaseShift = lightInOutFlow.y;
	    
    int currentFrameIndex = int(TIME * speed + phaseShift) % int(numAnimationColumns);
    float frameShift = float(currentFrameIndex) / numAnimationColumns; // frameshift shifts the UV.x so that the starting point is in the proper column
	if(speed < 0.0) // if the speed is negative, then the animation should playbackwards, so 0.75, 0.5, 0.25, 0
	{
		 frameShift = 0.75 - frameShift;
	}
	
    vec2 adjustedUV = vec2((uvCoord.x / numAnimationColumns + frameShift), uvCoord.y);
    return texture(animationTexture, adjustedUV);
}

float subtractBlueFromRedLight(vec4 currentInflowColor, float lightInflowIntensity){
	
	return currentInflowColor.a *(currentInflowColor.r - currentInflowColor.b) * lightInflowIntensity;
}
void fragment(){
	float animationspeed = 2.0f;
	
	vec4 col_baseTexture = texture(TEXTURE, UV);
	vec4 col_anim1in  = getAnimationFrameColor(animation1,UV,animationspeed, lightInFlow1);
	vec4 col_anim1out = getAnimationFrameColor(animation1,UV,-animationspeed, lightOutFlow1);
    vec4 col_anim2in  = getAnimationFrameColor(animation2,UV,animationspeed, lightInFlow2);
	vec4 col_anim2out = getAnimationFrameColor(animation2,UV,-animationspeed, lightOutFlow2);
    vec4 col_anim3in  = getAnimationFrameColor(animation3,UV,animationspeed, lightInFlow3);
	vec4 col_anim3out = getAnimationFrameColor(animation3,UV,-animationspeed, lightOutFlow3);
    vec4 col_anim4in  = getAnimationFrameColor(animation4,UV,animationspeed, lightInFlow4);
	vec4 col_anim4out = getAnimationFrameColor(animation4,UV,-animationspeed, lightOutFlow4);
    vec4 col_anim5in  = getAnimationFrameColor(animation5,UV,animationspeed, lightInFlow5);
	vec4 col_anim5out = getAnimationFrameColor(animation5,UV,-animationspeed, lightOutFlow5);
    vec4 col_anim6in  = getAnimationFrameColor(animation6,UV,animationspeed, lightInFlow6);
	vec4 col_anim6out = getAnimationFrameColor(animation6,UV,-animationspeed, lightOutFlow6);
    vec4 col_anim7in  = getAnimationFrameColor(animation7,UV,animationspeed, lightInFlow7);
	vec4 col_anim7out = getAnimationFrameColor(animation7,UV,-animationspeed, lightOutFlow7);
    vec4 col_anim8in  = getAnimationFrameColor(animation8,UV,animationspeed, lightInFlow8);
	vec4 col_anim8out = getAnimationFrameColor(animation8,UV,-animationspeed, lightOutFlow8);
    
  // Der rot Kanal = höhen, z.B.
  // Der blau Kanal = tiefen
  
  float intensity = subtractBlueFromRedLight( col_anim1in, lightInFlow1.x) +
		subtractBlueFromRedLight( col_anim2in, lightInFlow2.x) +
		subtractBlueFromRedLight( col_anim3in, lightInFlow3.x) +
		subtractBlueFromRedLight( col_anim4in, lightInFlow4.x) +
		subtractBlueFromRedLight( col_anim5in, lightInFlow5.x) +
		subtractBlueFromRedLight( col_anim6in, lightInFlow6.x) +
		subtractBlueFromRedLight( col_anim7in, lightInFlow7.x) +
		subtractBlueFromRedLight( col_anim8in, lightInFlow8.x) +
		subtractBlueFromRedLight( col_anim1out, lightOutFlow1.x) +
		subtractBlueFromRedLight( col_anim2out, lightOutFlow2.x) +
		subtractBlueFromRedLight( col_anim3out, lightOutFlow3.x) +
		subtractBlueFromRedLight( col_anim4out, lightOutFlow4.x) +
		subtractBlueFromRedLight( col_anim5out, lightOutFlow5.x) +
		subtractBlueFromRedLight( col_anim6out, lightOutFlow6.x) +
		subtractBlueFromRedLight( col_anim7out, lightOutFlow7.x) +
		subtractBlueFromRedLight( col_anim8out, lightOutFlow8.x);
	

  COLOR = laserColor * 2.5 * abs(intensity);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_efdvx"]
shader = SubResource("Shader_rx45y")
shader_parameter/laserColor = Vector4(0.4, 0, 0, 1)
shader_parameter/lightInFlow1 = Vector4(1, 0, 0, 0)
shader_parameter/lightOutFlow1 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow2 = Vector4(0, 0, 0, 0)
shader_parameter/lightOutFlow2 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow3 = Vector4(-0.438, -0.24, 0, 0)
shader_parameter/lightOutFlow3 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow4 = Vector4(-0.438, -0.24, 0, 0)
shader_parameter/lightOutFlow4 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow5 = null
shader_parameter/lightOutFlow5 = null
shader_parameter/lightInFlow6 = null
shader_parameter/lightOutFlow6 = null
shader_parameter/lightInFlow7 = null
shader_parameter/lightOutFlow7 = null
shader_parameter/lightInFlow8 = null
shader_parameter/lightOutFlow8 = null
shader_parameter/numAnimationColumns = 4.0
shader_parameter/animation1 = ExtResource("2_1cs17")
shader_parameter/animation2 = ExtResource("3_jbild")
shader_parameter/animation3 = ExtResource("4_sgbp3")
shader_parameter/animation4 = ExtResource("5_hqp3p")

[node name="DirectionalCoupler" type="TextureRect"]
custom_minimum_size = Vector2(122, 122)
layout_direction = 1
offset_right = 122.0
offset_bottom = 122.0
stretch_mode = 2
script = SubResource("CSharpScript_niigs")
Slider = Object(HSlider,"_import_path":NodePath(""),"unique_name_in_owner":true,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","visible":true,"modulate":Color(1, 1, 1, 1),"self_modulate":Color(1, 1, 1, 1),"show_behind_parent":false,"top_level":false,"clip_children":0,"light_mask":1,"visibility_layer":1,"z_index":0,"z_as_relative":true,"y_sort_enabled":false,"texture_filter":0,"texture_repeat":0,"material":null,"use_parent_material":false,"clip_contents":false,"custom_minimum_size":Vector2(0, 0),"layout_direction":0,"layout_mode":3,"anchors_preset":0,"anchor_left":0.0,"anchor_top":0.0,"anchor_right":0.0,"anchor_bottom":0.0,"offset_left":7.0,"offset_top":100.0,"offset_right":116.0,"offset_bottom":116.0,"grow_horizontal":1,"grow_vertical":1,"rotation":0.0,"scale":Vector2(1, 1),"pivot_offset":Vector2(0, 0),"size_flags_horizontal":1,"size_flags_vertical":0,"size_flags_stretch_ratio":1.0,"auto_translate":true,"localize_numeral_system":true,"tooltip_text":"","focus_neighbor_left":NodePath(""),"focus_neighbor_top":NodePath(""),"focus_neighbor_right":NodePath(""),"focus_neighbor_bottom":NodePath(""),"focus_next":NodePath(""),"focus_previous":NodePath(""),"focus_mode":2,"mouse_filter":0,"mouse_force_pass_scroll_events":true,"mouse_default_cursor_shape":0,"shortcut_context":null,"theme":null,"theme_type_variation":&"","min_value":0.0,"max_value":1.0,"step":0.01,"page":0.0,"value":0.5,"exp_edit":false,"rounded":false,"allow_greater":false,"allow_lesser":false,"editable":true,"scrollable":true,"tick_count":0,"ticks_on_borders":false,"script":null)

Label = Object(RichTextLabel,"_import_path":NodePath(""),"unique_name_in_owner":true,"process_mode":0,"process_priority":0,"process_physics_priority":0,"process_thread_group":0,"editor_description":"","visible":true,"modulate":Color(1, 1, 1, 1),"self_modulate":Color(1, 1, 1, 1),"show_behind_parent":false,"top_level":false,"clip_children":0,"light_mask":1,"visibility_layer":1,"z_index":0,"z_as_relative":true,"y_sort_enabled":false,"texture_filter":0,"texture_repeat":0,"material":null,"use_parent_material":false,"clip_contents":true,"custom_minimum_size":Vector2(0, 0),"layout_direction":0,"layout_mode":3,"anchors_preset":0,"anchor_left":0.0,"anchor_top":0.0,"anchor_right":0.0,"anchor_bottom":0.0,"offset_left":3.0,"offset_top":5.0,"offset_right":120.0,"offset_bottom":34.0,"grow_horizontal":1,"grow_vertical":1,"rotation":0.0,"scale":Vector2(1, 1),"pivot_offset":Vector2(0, 0),"size_flags_horizontal":1,"size_flags_vertical":1,"size_flags_stretch_ratio":1.0,"auto_translate":true,"localize_numeral_system":true,"tooltip_text":"","focus_neighbor_left":NodePath(""),"focus_neighbor_top":NodePath(""),"focus_neighbor_right":NodePath(""),"focus_neighbor_bottom":NodePath(""),"focus_next":NodePath(""),"focus_previous":NodePath(""),"focus_mode":0,"mouse_filter":0,"mouse_force_pass_scroll_events":true,"mouse_default_cursor_shape":0,"shortcut_context":null,"theme":null,"theme_type_variation":&"","bbcode_enabled":true,"text":"[center]100","fit_content":false,"scroll_active":true,"scroll_following":false,"autowrap_mode":3,"tab_size":4,"context_menu_enabled":false,"shortcut_keys_enabled":true,"custom_effects":[],"meta_underlined":true,"hint_underlined":true,"threaded":false,"progress_bar_delay":1000,"selection_enabled":false,"deselect_on_focus_loss_enabled":true,"drag_and_drop_selection_enabled":true,"visible_characters":-1,"visible_characters_behavior":0,"visible_ratio":1.0,"text_direction":0,"language":"","structured_text_bidi_override":0,"structured_text_bidi_override_options":[],"script":null)


[node name="BackgroundImage" type="Sprite2D" parent="."]
scale = Vector2(2, 2)
texture = ExtResource("2_80i23")
centered = false
region_rect = Rect2(11.5, 16, 41, 39)
script = ExtResource("3_rkdkq")

[node name="Overlay" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_efdvx")
scale = Vector2(2, 2)
texture = ExtResource("2_80i23")
centered = false
region_rect = Rect2(0, 0, 62, 32)

[node name="JumpRatioSlider" type="HSlider" parent="."]
unique_name_in_owner = true
layout_mode = 0
offset_left = 7.0
offset_top = 100.0
offset_right = 116.0
offset_bottom = 116.0
max_value = 1.0
step = 0.01
value = 0.5

[node name="JumpRatioSliderLabel" type="RichTextLabel" parent="."]
unique_name_in_owner = true
layout_mode = 0
offset_left = 3.0
offset_top = 5.0
offset_right = 120.0
offset_bottom = 34.0
mouse_filter = 2
bbcode_enabled = true
text = "[center]100"
